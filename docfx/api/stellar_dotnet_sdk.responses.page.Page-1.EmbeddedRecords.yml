### YamlMime:ManagedReference
items:
- uid: stellar_dotnet_sdk.responses.page.Page`1.EmbeddedRecords
  commentId: T:stellar_dotnet_sdk.responses.page.Page`1.EmbeddedRecords
  id: Page`1.EmbeddedRecords
  parent: stellar_dotnet_sdk.responses.page
  children:
  - stellar_dotnet_sdk.responses.page.Page`1.EmbeddedRecords.Records
  langs:
  - csharp
  - vb
  name: Page<T>.EmbeddedRecords
  nameWithType: Page<T>.EmbeddedRecords
  fullName: stellar_dotnet_sdk.responses.page.Page<T>.EmbeddedRecords
  type: Class
  source:
    remote:
      path: stellar-dotnet-sdk/responses/Page.cs
      branch: master
      repo: https://github.com/elucidsoft/dotnet-stellar-sdk.git
    id: EmbeddedRecords
    path: ../stellar-dotnet-sdk/responses/Page.cs
    startLine: 16
  assemblies:
  - stellar-dotnet-sdk
  namespace: stellar_dotnet_sdk.responses.page
  syntax:
    content: 'public class EmbeddedRecords : object'
    content.vb: >-
      Public Class EmbeddedRecords
          Inherits Object
  inheritance:
  - System.Object
  nameWithType.vb: Page(Of T).EmbeddedRecords
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: stellar_dotnet_sdk.responses.page.Page(Of T).EmbeddedRecords
  name.vb: Page(Of T).EmbeddedRecords
- uid: stellar_dotnet_sdk.responses.page.Page`1.EmbeddedRecords.Records
  commentId: P:stellar_dotnet_sdk.responses.page.Page`1.EmbeddedRecords.Records
  id: Records
  parent: stellar_dotnet_sdk.responses.page.Page`1.EmbeddedRecords
  langs:
  - csharp
  - vb
  name: Records
  nameWithType: Page<T>.EmbeddedRecords.Records
  fullName: stellar_dotnet_sdk.responses.page.Page<T>.EmbeddedRecords.Records
  type: Property
  source:
    remote:
      path: stellar-dotnet-sdk/responses/Page.cs
      branch: master
      repo: https://github.com/elucidsoft/dotnet-stellar-sdk.git
    id: Records
    path: ../stellar-dotnet-sdk/responses/Page.cs
    startLine: 18
  assemblies:
  - stellar-dotnet-sdk
  namespace: stellar_dotnet_sdk.responses.page
  syntax:
    content: public List<T> Records { get; }
    parameters: []
    return:
      type: List{{T}}
    content.vb: Public ReadOnly Property Records As List(Of T)
  overload: stellar_dotnet_sdk.responses.page.Page`1.EmbeddedRecords.Records*
  nameWithType.vb: Page(Of T).EmbeddedRecords.Records
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: stellar_dotnet_sdk.responses.page.Page(Of T).EmbeddedRecords.Records
references:
- uid: stellar_dotnet_sdk.responses.page
  commentId: N:stellar_dotnet_sdk.responses.page
  name: stellar_dotnet_sdk.responses.page
  nameWithType: stellar_dotnet_sdk.responses.page
  fullName: stellar_dotnet_sdk.responses.page
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: stellar_dotnet_sdk.responses.page.Page`1.EmbeddedRecords.Records*
  commentId: Overload:stellar_dotnet_sdk.responses.page.Page`1.EmbeddedRecords.Records
  name: Records
  nameWithType: Page<T>.EmbeddedRecords.Records
  fullName: stellar_dotnet_sdk.responses.page.Page<T>.EmbeddedRecords.Records
  nameWithType.vb: Page(Of T).EmbeddedRecords.Records
  fullName.vb: stellar_dotnet_sdk.responses.page.Page(Of T).EmbeddedRecords.Records
- uid: List{{T}}
  commentId: '!:List{`0}'
  definition: List`1
  name: List<T>
  nameWithType: List<T>
  fullName: List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
