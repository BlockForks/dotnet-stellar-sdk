### YamlMime:ManagedReference
items:
- uid: stellar_dotnet_sdk.EnumerableExtensions
  commentId: T:stellar_dotnet_sdk.EnumerableExtensions
  id: EnumerableExtensions
  parent: stellar_dotnet_sdk
  children:
  - stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString``1(IEnumerable{``0},Func{``0,System.String})
  - stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString``1(IEnumerable{``0},Func{``0,System.String},System.String)
  langs:
  - csharp
  - vb
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: stellar_dotnet_sdk.EnumerableExtensions
  type: Class
  source:
    remote:
      path: stellar-dotnet-sdk/EnumerableExtensions.cs
      branch: master
      repo: https://github.com/elucidsoft/dotnet-stellar-sdk.git
    id: EnumerableExtensions
    path: ../stellar-dotnet-sdk/EnumerableExtensions.cs
    startLine: 6
  assemblies:
  - stellar-dotnet-sdk
  namespace: stellar_dotnet_sdk
  syntax:
    content: 'public static class EnumerableExtensions : object'
    content.vb: >-
      Public Module EnumerableExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString``1(IEnumerable{``0},Func{``0,System.String})
  commentId: M:stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString``1(IEnumerable{``0},Func{``0,System.String})
  id: ToConcatenatedString``1(IEnumerable{``0},Func{``0,System.String})
  isExtensionMethod: true
  parent: stellar_dotnet_sdk.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToConcatenatedString<T>(IEnumerable<T>, Func<T, String>)
  nameWithType: EnumerableExtensions.ToConcatenatedString<T>(IEnumerable<T>, Func<T, String>)
  fullName: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString<T>(IEnumerable<T>, Func<T, System.String>)
  type: Method
  source:
    remote:
      path: stellar-dotnet-sdk/EnumerableExtensions.cs
      branch: master
      repo: https://github.com/elucidsoft/dotnet-stellar-sdk.git
    id: ToConcatenatedString
    path: ../stellar-dotnet-sdk/EnumerableExtensions.cs
    startLine: 12
  assemblies:
  - stellar-dotnet-sdk
  namespace: stellar_dotnet_sdk
  summary: "\nCreates a string from the sequence by concatenating the result\nof the specified string selector function for each element.\n"
  example: []
  syntax:
    content: public static string ToConcatenatedString<T>(this IEnumerable<T> source, Func<T, string> stringSelector)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    - id: stringSelector
      type: Func{{T},System.String}
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToConcatenatedString(Of T)(source As IEnumerable(Of T), stringSelector As Func(Of T, String)) As String
  overload: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString*
  nameWithType.vb: EnumerableExtensions.ToConcatenatedString(Of T)(IEnumerable(Of T), Func(Of T, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString(Of T)(IEnumerable(Of T), Func(Of T, System.String))
  name.vb: ToConcatenatedString(Of T)(IEnumerable(Of T), Func(Of T, String))
- uid: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString``1(IEnumerable{``0},Func{``0,System.String},System.String)
  commentId: M:stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString``1(IEnumerable{``0},Func{``0,System.String},System.String)
  id: ToConcatenatedString``1(IEnumerable{``0},Func{``0,System.String},System.String)
  isExtensionMethod: true
  parent: stellar_dotnet_sdk.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToConcatenatedString<T>(IEnumerable<T>, Func<T, String>, String)
  nameWithType: EnumerableExtensions.ToConcatenatedString<T>(IEnumerable<T>, Func<T, String>, String)
  fullName: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString<T>(IEnumerable<T>, Func<T, System.String>, System.String)
  type: Method
  source:
    remote:
      path: stellar-dotnet-sdk/EnumerableExtensions.cs
      branch: master
      repo: https://github.com/elucidsoft/dotnet-stellar-sdk.git
    id: ToConcatenatedString
    path: ../stellar-dotnet-sdk/EnumerableExtensions.cs
    startLine: 23
  assemblies:
  - stellar-dotnet-sdk
  namespace: stellar_dotnet_sdk
  summary: "\nCreates a string from the sequence by concatenating the result\nof the specified string selector function for each element.\n"
  example: []
  syntax:
    content: public static string ToConcatenatedString<T>(this IEnumerable<T> source, Func<T, string> stringSelector, string separator)
    parameters:
    - id: source
      type: IEnumerable{{T}}
    - id: stringSelector
      type: Func{{T},System.String}
    - id: separator
      type: System.String
      description: The string which separates each concatenated item.
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToConcatenatedString(Of T)(source As IEnumerable(Of T), stringSelector As Func(Of T, String), separator As String) As String
  overload: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString*
  nameWithType.vb: EnumerableExtensions.ToConcatenatedString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString(Of T)(IEnumerable(Of T), Func(Of T, System.String), System.String)
  name.vb: ToConcatenatedString(Of T)(IEnumerable(Of T), Func(Of T, String), String)
references:
- uid: stellar_dotnet_sdk
  commentId: N:stellar_dotnet_sdk
  name: stellar_dotnet_sdk
  nameWithType: stellar_dotnet_sdk
  fullName: stellar_dotnet_sdk
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString*
  commentId: Overload:stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString
  name: ToConcatenatedString
  nameWithType: EnumerableExtensions.ToConcatenatedString
  fullName: stellar_dotnet_sdk.EnumerableExtensions.ToConcatenatedString
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{T},System.String}
  commentId: '!:Func{``0,System.String}'
  definition: Func`2
  name: Func<T, String>
  nameWithType: Func<T, String>
  fullName: Func<T, System.String>
  nameWithType.vb: Func(Of T, String)
  fullName.vb: Func(Of T, System.String)
  name.vb: Func(Of T, String)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
